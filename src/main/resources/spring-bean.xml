<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
	http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">

    <context:component-scan base-package="com.wrr">
        <!-- spring是bean的容器（spring用来操做 service+repository）controler是springmvc操作的 所以排除-->
        <!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />-->
    </context:component-scan>

    <!--    整合mybatis层-->
    <!--1、关联数据库配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--2、连接池
            dbcp:半自动化操作，不能自动连接
            c3p0：自动化操作（自动化加载配置文件，并且可以自动设置到对象中）
            druid：企业公司使用
    -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driverManager}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--c3p0私有属性-->
        <property name="maxPoolSize" value="30"/>
        <property name="minPoolSize" value="10"/>
        <property name="autoCommitOnClose" value="false"/>
        <property name="checkoutTimeout" value="10000"/>
        <property name="acquireRetryAttempts" value="2"/>
    </bean>

    <!-- 事务管理器  不再使用jdbc的commit和rollback 必须由事务管理器提供 配置事物管理器必须要注入dataSource-->
    <bean id="tm"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 定义事物里面的通知-->
    <tx:advice id="txAdvise" transaction-manager="tm">
        <tx:attributes>
            <!--tx:method的作用是拦截指定方法开头的 然后对他进行事物处理 -->
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <!--read-only="true" 意思是除了上面拦截的以外  其他的都不拦截-->
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <!-- 定义切点(搜索条件) aop:pointcut 意思相当于跟if差不多 满足条件的就会进来
      表示式   execution(返回值  包.类.方法(参数 ...代表任意多个参数))
      id 表示切点的名字
   -->
        <aop:pointcut expression="execution(* com.wrr.service.*.*(..))" id="myPointCut" />
        <!-- 关联切点和事务管理器 将事物跟切点连接起来-->
        <aop:advisor advice-ref="txAdvise" pointcut-ref="myPointCut" />
    </aop:config>


    <!-- 集成mybatis -->
    <!-- 实例化一个SqlSessionFactory工厂-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--指定数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--指定实体文件所在的位置-->
        <property name="typeAliasesPackage" value="com.wrr.entity"/>
        <!--指定mapper.xml文件所在的位置-->
        <property name="mapperLocations" value="classpath:mapper/*.xml" />
    </bean>

    <!-- 扫描mybatis的接口映射文件  -->
    <bean id="scannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.wrr.dao"/>
    </bean>

</beans>
